// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Raze.API.Tests
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class PostServiceTestsFeature : object, Xunit.IClassFixture<PostServiceTestsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "PostServiceTests.feature"
#line hidden
        
        public PostServiceTestsFeature(PostServiceTestsFeature.FixtureData fixtureData, Raze_API_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "", "PostServiceTests", "\tAs a Developer\r\n\tI want to add new Post through API\r\n\tSo that It can be availabl" +
                    "e for applicatios.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
 #line hidden
#line 7
  testRunner.Given("the Endpoint https://localhost:5001/api/v1/posts is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Title",
                        "Description",
                        "Published"});
            table1.AddRow(new string[] {
                        "1",
                        "Casual",
                        "Casual Outfits",
                        "1"});
#line 8
  testRunner.And("A Interest is already stored", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Title"});
            table2.AddRow(new string[] {
                        "1",
                        "Jeans"});
#line 11
     testRunner.And("A Tag is already stored", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "FirstName",
                        "LastName",
                        "UserName",
                        "Password",
                        "Age",
                        "Premium",
                        "InterestId"});
            table3.AddRow(new string[] {
                        "1",
                        "Edward",
                        "Ticlavilca",
                        "Edward24",
                        "pass",
                        "19",
                        "1",
                        "1"});
#line 14
  testRunner.And("A User is already stored", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Title",
                        "Image",
                        "Description",
                        "Rate",
                        "NumberOfRates",
                        "UserId",
                        "InterestId",
                        "TagId"});
            table4.AddRow(new string[] {
                        "1",
                        "Best winter outfit",
                        "image 1",
                        "Use a striped t-shirt this winter",
                        "4",
                        "10",
                        "1",
                        "1",
                        "1"});
#line 17
     testRunner.And("A Post is already stored", ((string)(null)), table4, "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Add Post")]
        [Xunit.TraitAttribute("FeatureTitle", "PostServiceTests")]
        [Xunit.TraitAttribute("Description", "Add Post")]
        [Xunit.TraitAttribute("Category", "post-adding")]
        public virtual void AddPost()
        {
            string[] tagsOfScenario = new string[] {
                    "post-adding"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add Post", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 23
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Title",
                            "Image",
                            "Description",
                            "UserId",
                            "InterestId",
                            "TagId"});
                table5.AddRow(new string[] {
                            "Best summer outfit",
                            "image 1",
                            "Use a striped t-shirt this summer",
                            "1",
                            "1",
                            "1"});
#line 24
  testRunner.When("A Post Request is Sent", ((string)(null)), table5, "When ");
#line hidden
#line 27
  testRunner.Then("A Response with status 200 is received", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "id",
                            "title",
                            "image",
                            "description",
                            "rate",
                            "numberOfRates",
                            "userId",
                            "interestId",
                            "tagId"});
                table6.AddRow(new string[] {
                            "2",
                            "Best summer outfit",
                            "image 1",
                            "Use a striped t-shirt this summer",
                            "0",
                            "0",
                            "1",
                            "1",
                            "1"});
#line 28
  testRunner.And("A Post Resource is included in Response Body", ((string)(null)), table6, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Add Post with Invalid Tag")]
        [Xunit.TraitAttribute("FeatureTitle", "PostServiceTests")]
        [Xunit.TraitAttribute("Description", "Add Post with Invalid Tag")]
        public virtual void AddPostWithInvalidTag()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add Post with Invalid Tag", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 32
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Title",
                            "Image",
                            "Description",
                            "UserId",
                            "InterestId",
                            "TagId"});
                table7.AddRow(new string[] {
                            "Best autumn outfit",
                            "image 1",
                            "Use a striped t-shirt this autumn",
                            "1",
                            "1",
                            "-20"});
#line 33
  testRunner.When("A Post Request is Sent", ((string)(null)), table7, "When ");
#line hidden
#line 36
  testRunner.Then("A Response with status 400 is received", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 37
  testRunner.And("A Message of \"Tag not found.\" is included in Response Body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Add Post with Invalid Interest")]
        [Xunit.TraitAttribute("FeatureTitle", "PostServiceTests")]
        [Xunit.TraitAttribute("Description", "Add Post with Invalid Interest")]
        public virtual void AddPostWithInvalidInterest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add Post with Invalid Interest", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 39
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Title",
                            "Image",
                            "Description",
                            "UserId",
                            "InterestId",
                            "TagId"});
                table8.AddRow(new string[] {
                            "Best autumn outfit",
                            "image 1",
                            "Use a striped t-shirt this autumn",
                            "1",
                            "-1",
                            "1"});
#line 40
  testRunner.When("A Post Request is Sent", ((string)(null)), table8, "When ");
#line hidden
#line 43
  testRunner.Then("A Response with status 400 is received", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 44
  testRunner.And("A Message of \"Interest not found.\" is included in Response Body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Add Post with Invalid User")]
        [Xunit.TraitAttribute("FeatureTitle", "PostServiceTests")]
        [Xunit.TraitAttribute("Description", "Add Post with Invalid User")]
        public virtual void AddPostWithInvalidUser()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add Post with Invalid User", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 46
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Title",
                            "Image",
                            "Description",
                            "UserId",
                            "InterestId",
                            "TagId"});
                table9.AddRow(new string[] {
                            "Best autumn outfit",
                            "image 1",
                            "Use a striped t-shirt this autumn",
                            "-1",
                            "1",
                            "1"});
#line 47
  testRunner.When("A Post Request is Sent", ((string)(null)), table9, "When ");
#line hidden
#line 50
  testRunner.Then("A Response with status 400 is received", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 51
  testRunner.And("A Message of \"User not found.\" is included in Response Body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                PostServiceTestsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                PostServiceTestsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
